"""
Agents Sp√©cialis√©s - Inspir√©s de Sintra.ai
Chaque agent a sa personnalit√©, ses comp√©tences et ses outils
"""

from typing import Dict, List, Any, Optional
from datetime import datetime
import logging
from .integrations.social_media import InstagramIntegration, TwitterIntegration, LinkedInIntegration, FacebookIntegration, TikTokIntegration
from .integrations.customer_support import ZendeskIntegration, IntercomIntegration, FreshdeskIntegration
from .integrations.seo import GoogleSearchConsoleIntegration, SEMrushIntegration, AhrefsIntegration
from .integrations.analytics import GoogleAnalyticsIntegration, MixpanelIntegration, AmplitudeIntegration
from .integrations.crm import SalesforceIntegration, HubSpotIntegration, PipedriveIntegration
from .integrations.email import MailchimpIntegration, SendGridIntegration, BrevoIntegration
from .integrations.content import GrammarlyIntegration, CopyAIIntegration, JasperIntegration

logger = logging.getLogger(__name__)


class SpecializedAgent:
    """Classe de base pour tous les agents sp√©cialis√©s"""
    
    def __init__(self, agent_core):
        self.agent_core = agent_core
        self.name = "Generic Agent"
        self.emoji = "ü§ñ"
        self.role = "General Assistant"
        self.description = "A general purpose AI assistant"
        self.specialties = []
        self.preferred_tools = []
        self.personality_traits = []
        self.task_count = 0
        self.integrations = []  # Liste des int√©grations disponibles pour cet agent
    
    def get_system_prompt(self) -> str:
        """G√©n√®re le prompt syst√®me personnalis√© pour cet agent"""
        return f"""Tu es {self.name} {self.emoji}, {self.role}.

Description: {self.description}

Tes sp√©cialit√©s:
{chr(10).join(f"- {s}" for s in self.specialties)}

Traits de personnalit√©:
{chr(10).join(f"- {t}" for t in self.personality_traits)}

Outils pr√©f√©r√©s: {', '.join(self.preferred_tools)}

Tu es expert dans ton domaine et tu abordes chaque t√¢che avec professionnalisme et cr√©ativit√©.
"""
    
    def can_handle(self, task_description: str) -> float:
        """
        D√©termine si cet agent peut g√©rer cette t√¢che (0.0 √† 1.0)
        Plus le score est √©lev√©, plus l'agent est adapt√©
        """
        score = 0.0
        task_lower = task_description.lower()
        
        # V√©rifier les mots-cl√©s li√©s aux sp√©cialit√©s
        for specialty in self.specialties:
            if any(word in task_lower for word in specialty.lower().split()):
                score += 0.2
        
        return min(score, 1.0)
    
    async def execute_task(self, task_description: str, context: Optional[Dict] = None) -> Dict[str, Any]:
        """Ex√©cute une t√¢che avec la personnalit√© de cet agent"""
        self.task_count += 1
        
        # Injecter le prompt syst√®me personnalis√©
        enhanced_context = context or {}
        enhanced_context["agent_personality"] = self.get_system_prompt()
        
        # Utiliser l'agent core avec le contexte personnalis√©
        result = await self.agent_core.run_task(task_description, enhanced_context)
        
        return result
    
    def get_info(self) -> Dict[str, Any]:
        """Retourne les informations sur l'agent"""
        return {
            "name": self.name,
            "emoji": self.emoji,
            "role": self.role,
            "description": self.description,
            "specialties": self.specialties,
            "personality_traits": self.personality_traits,
            "preferred_tools": self.preferred_tools,
            "task_count": self.task_count,
            "integrations": [
                {
                    "name": integration.name,
                    "icon": integration.icon,
                    "description": integration.description,
                    "status": integration.status.value,
                    "is_configured": bool(integration.credentials)
                }
                for integration in self.integrations
            ]
        }


class SoshieAgent(SpecializedAgent):
    """Soshie üì± - Social Media Manager"""
    
    def __init__(self, agent_core):
        super().__init__(agent_core)
        self.name = "Soshie"
        self.emoji = "üì±"
        self.role = "Social Media Manager"
        self.description = "Expert en m√©dias sociaux, cr√©ation de contenu et engagement communautaire"
        
        self.specialties = [
            "Cr√©ation de posts pour r√©seaux sociaux",
            "Strat√©gie de contenu social media",
            "Analyse des tendances",
            "Planification de calendrier √©ditorial",
            "Engagement et community management",
            "Hashtags et optimisation de port√©e",
            "Stories et reels cr√©atifs"
        ]
        
        self.personality_traits = [
            "Cr√©ative et tendance",
            "Conna√Æt les derni√®res trends",
            "Ton engageant et dynamique",
            "Orient√©e viralit√© et engagement"
        ]
        
        self.preferred_tools = ["web_search", "calculator"]
        
        # Int√©grations sp√©cifiques pour Social Media
        self.integrations = [
            InstagramIntegration(),
            TwitterIntegration(),
            LinkedInIntegration(),
            FacebookIntegration(),
            TikTokIntegration()
        ]
    
    def can_handle(self, task_description: str) -> float:
        keywords = [
            "social media", "instagram", "facebook", "twitter", "linkedin", "tiktok",
            "post", "contenu", "engagement", "hashtag", "story", "reel",
            "community", "r√©seaux sociaux", "publication"
        ]
        
        task_lower = task_description.lower()
        matches = sum(1 for kw in keywords if kw in task_lower)
        
        return min(matches * 0.25, 1.0)


class CassieAgent(SpecializedAgent):
    """Cassie üí¨ - Customer Support Specialist"""
    
    def __init__(self, agent_core):
        super().__init__(agent_core)
        self.name = "Cassie"
        self.emoji = "üí¨"
        self.role = "Customer Support Specialist"
        self.description = "Experte en support client, r√©solution de probl√®mes et satisfaction client"
        
        self.specialties = [
            "R√©ponses aux questions clients",
            "R√©solution de probl√®mes",
            "Gestion des r√©clamations",
            "Cr√©ation de FAQ",
            "Scripts de support",
            "Emails de suivi client",
            "Am√©lioration de l'exp√©rience client"
        ]
        
        self.personality_traits = [
            "Empathique et patiente",
            "Excellente communication",
            "R√©solution de probl√®mes efficace",
            "Toujours positive et aidante"
        ]
        
        self.preferred_tools = ["web_search"]
        
        # Int√©grations sp√©cifiques pour Customer Support
        self.integrations = [
            ZendeskIntegration(),
            IntercomIntegration(),
            FreshdeskIntegration()
        ]
    
    def can_handle(self, task_description: str) -> float:
        keywords = [
            "client", "customer", "support", "service", "aide", "help",
            "question", "probl√®me", "r√©clamation", "faq", "assistance",
            "r√©ponse", "email client", "satisfaction"
        ]
        
        task_lower = task_description.lower()
        matches = sum(1 for kw in keywords if kw in task_lower)
        
        return min(matches * 0.25, 1.0)


class SeomiAgent(SpecializedAgent):
    """Seomi üîç - SEO Specialist"""
    
    def __init__(self, agent_core):
        super().__init__(agent_core)
        self.name = "Seomi"
        self.emoji = "üîç"
        self.role = "SEO Specialist"
        self.description = "Expert en r√©f√©rencement naturel, optimisation SEO et analyse de mots-cl√©s"
        
        self.specialties = [
            "Recherche de mots-cl√©s",
            "Optimisation on-page SEO",
            "Strat√©gie de backlinks",
            "Analyse de la concurrence",
            "R√©daction SEO-friendly",
            "Audit technique SEO",
            "Am√©lioration du ranking Google"
        ]
        
        self.personality_traits = [
            "Analytique et m√©thodique",
            "Orient√©e donn√©es et r√©sultats",
            "Connaissance approfondie des algorithmes",
            "Strat√®ge du long terme"
        ]
        
        self.preferred_tools = ["web_search", "calculator"]
        
        # Int√©grations sp√©cifiques pour SEO
        self.integrations = [
            GoogleSearchConsoleIntegration(),
            SEMrushIntegration(),
            AhrefsIntegration(),
            GoogleAnalyticsIntegration()
        ]
    
    def can_handle(self, task_description: str) -> float:
        keywords = [
            "seo", "r√©f√©rencement", "google", "ranking", "mot-cl√©", "keyword",
            "backlink", "optimisation", "search engine", "serp",
            "meta", "organic", "trafic", "site web"
        ]
        
        task_lower = task_description.lower()
        matches = sum(1 for kw in keywords if kw in task_lower)
        
        return min(matches * 0.3, 1.0)


class DexterAgent(SpecializedAgent):
    """Dexter üìä - Data Analyst"""
    
    def __init__(self, agent_core):
        super().__init__(agent_core)
        self.name = "Dexter"
        self.emoji = "üìä"
        self.role = "Data Analyst"
        self.description = "Expert en analyse de donn√©es, statistiques et insights business"
        
        self.specialties = [
            "Analyse de donn√©es complexes",
            "Cr√©ation de rapports et dashboards",
            "Pr√©visions et mod√©lisation",
            "KPIs et m√©triques business",
            "Visualisation de donn√©es",
            "Statistiques et probabilit√©s",
            "Insights actionnables"
        ]
        
        self.personality_traits = [
            "Pr√©cis et rigoureux",
            "Pens√©e analytique avanc√©e",
            "Transforme les donn√©es en d√©cisions",
            "Orient√© r√©sultats mesurables"
        ]
        
        self.preferred_tools = ["calculator", "code_executor"]
        
        # Int√©grations sp√©cifiques pour Data Analysis
        self.integrations = [
            GoogleAnalyticsIntegration(),
            MixpanelIntegration(),
            AmplitudeIntegration()
        ]
    
    def can_handle(self, task_description: str) -> float:
        keywords = [
            "data", "donn√©es", "analyse", "statistique", "calcul", "rapport",
            "dashboard", "m√©trique", "kpi", "pr√©vision", "forecast",
            "visualisation", "graphique", "chiffre", "nombre"
        ]
        
        task_lower = task_description.lower()
        matches = sum(1 for kw in keywords if kw in task_lower)
        
        return min(matches * 0.3, 1.0)


class BuddyAgent(SpecializedAgent):
    """Buddy üíº - Business Development Manager"""
    
    def __init__(self, agent_core):
        super().__init__(agent_core)
        self.name = "Buddy"
        self.emoji = "üíº"
        self.role = "Business Development Manager"
        self.description = "Expert en d√©veloppement business, strat√©gie et croissance"
        
        self.specialties = [
            "Strat√©gies de croissance",
            "Analyse de march√©",
            "Business plans",
            "Partenariats strat√©giques",
            "Pitch decks",
            "Opportunit√©s de march√©",
            "Expansion business"
        ]
        
        self.personality_traits = [
            "Visionnaire et strat√©gique",
            "Orient√© croissance",
            "Excellent networker",
            "Pens√©e entrepreneuriale"
        ]
        
        self.preferred_tools = ["web_search", "calculator"]
        
        # Int√©grations sp√©cifiques pour Business Development
        self.integrations = [
            LinkedInIntegration(),
            SalesforceIntegration(),
            HubSpotIntegration(),
            PipedriveIntegration()
        ]
    
    def can_handle(self, task_description: str) -> float:
        keywords = [
            "business", "strat√©gie", "croissance", "d√©veloppement", "march√©",
            "plan", "pitch", "partenariat", "expansion", "opportunit√©",
            "roi", "revenue", "growth", "strategy"
        ]
        
        task_lower = task_description.lower()
        matches = sum(1 for kw in keywords if kw in task_lower)
        
        return min(matches * 0.25, 1.0)


class EmmieAgent(SpecializedAgent):
    """Emmie üìß - Email Marketing Specialist"""
    
    def __init__(self, agent_core):
        super().__init__(agent_core)
        self.name = "Emmie"
        self.emoji = "üìß"
        self.role = "Email Marketing Specialist"
        self.description = "Experte en email marketing, automation et conversion"
        
        self.specialties = [
            "Campagnes email marketing",
            "S√©quences d'automation",
            "Copywriting persuasif",
            "A/B testing",
            "Segmentation audience",
            "Taux d'ouverture et clics",
            "Nurturing et conversion"
        ]
        
        self.personality_traits = [
            "Persuasive et convaincante",
            "Ax√©e conversion",
            "Cr√©ative dans le messaging",
            "Data-driven pour l'optimisation"
        ]
        
        self.preferred_tools = ["web_search"]
        
        # Int√©grations sp√©cifiques pour Email Marketing
        self.integrations = [
            MailchimpIntegration(),
            SendGridIntegration(),
            BrevoIntegration(),
            HubSpotIntegration()
        ]
    
    def can_handle(self, task_description: str) -> float:
        keywords = [
            "email", "newsletter", "campagne", "mailing", "automation",
            "conversion", "subject line", "copywriting", "cta",
            "s√©quence", "nurturing", "emailing"
        ]
        
        task_lower = task_description.lower()
        matches = sum(1 for kw in keywords if kw in task_lower)
        
        return min(matches * 0.3, 1.0)


class PennAgent(SpecializedAgent):
    """Penn ‚úçÔ∏è - Copywriter"""
    
    def __init__(self, agent_core):
        super().__init__(agent_core)
        self.name = "Penn"
        self.emoji = "‚úçÔ∏è"
        self.role = "Copywriter"
        self.description = "Expert en r√©daction publicitaire, contenu persuasif et storytelling"
        
        self.specialties = [
            "Copywriting publicitaire",
            "Headlines accrocheurs",
            "Landing pages",
            "Scripts de vente",
            "Storytelling de marque",
            "Contenu persuasif",
            "Annonces qui convertissent"
        ]
        
        self.personality_traits = [
            "Cr√©atif et percutant",
            "Ma√Ætre des mots",
            "Comprend la psychologie du consommateur",
            "Sp√©cialiste de la persuasion"
        ]
        
        self.preferred_tools = ["web_search"]
        
        # Int√©grations sp√©cifiques pour Copywriting
        self.integrations = [
            GrammarlyIntegration(),
            CopyAIIntegration(),
            JasperIntegration()
        ]
    
    def can_handle(self, task_description: str) -> float:
        keywords = [
            "copy", "r√©daction", "√©crire", "contenu", "article", "texte",
            "headline", "slogan", "annonce", "publicit√©", "ad copy",
            "landing page", "storytelling"
        ]
        
        task_lower = task_description.lower()
        matches = sum(1 for kw in keywords if kw in task_lower)
        
        return min(matches * 0.25, 1.0)


# Registry des agents sp√©cialis√©s
SPECIALIZED_AGENTS = {
    "soshie": SoshieAgent,
    "cassie": CassieAgent,
    "seomi": SeomiAgent,
    "dexter": DexterAgent,
    "buddy": BuddyAgent,
    "emmie": EmmieAgent,
    "penn": PennAgent
}


def get_best_agent(task_description: str, agent_core) -> SpecializedAgent:
    """
    S√©lectionne automatiquement le meilleur agent pour une t√¢che donn√©e
    """
    best_agent = None
    best_score = 0.0
    
    for agent_class in SPECIALIZED_AGENTS.values():
        agent = agent_class(agent_core)
        score = agent.can_handle(task_description)
        
        if score > best_score:
            best_score = score
            best_agent = agent
    
    # Si aucun agent sp√©cialis√© n'est adapt√©, utiliser Buddy (g√©n√©raliste)
    if best_score < 0.3:
        return BuddyAgent(agent_core)
    
    return best_agent


def list_all_agents(agent_core) -> List[Dict[str, Any]]:
    """Liste tous les agents disponibles avec leurs infos"""
    agents = []
    
    for agent_id, agent_class in SPECIALIZED_AGENTS.items():
        agent = agent_class(agent_core)
        info = agent.get_info()
        info["id"] = agent_id
        agents.append(info)
    
    return agents

