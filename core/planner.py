"""
Syst√®me de Planification Intelligent
"""

import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class TaskPlanner:
    """
    Planificateur de t√¢ches hi√©rarchique avec capacit√© de raisonnement
    """
    
    def __init__(self, agent):
        self.agent = agent
        self.planning_history = []
    
    async def create_plan(
        self,
        task_description: str,
        context: Optional[Dict] = None
    ) -> Dict[str, Any]:
        """
        Cr√©e un plan d'ex√©cution d√©taill√© pour une t√¢che
        
        Args:
            task_description: Description de la t√¢che
            context: Contexte additionnel
            
        Returns:
            Plan d'ex√©cution structur√©
        """
        logger.info("üß† Cr√©ation du plan d'ex√©cution...")
        
        # Analyser la t√¢che
        task_analysis = await self._analyze_task(task_description, context)
        
        # D√©composer en sous-t√¢ches
        subtasks = await self._decompose_task(task_description, task_analysis)
        
        # Cr√©er les √©tapes d'ex√©cution
        steps = await self._create_execution_steps(subtasks)
        
        # Identifier les d√©pendances
        dependencies = self._identify_dependencies(steps)
        
        plan = {
            "task": task_description,
            "analysis": task_analysis,
            "steps": steps,
            "dependencies": dependencies,
            "estimated_duration": self._estimate_duration(steps),
            "created_at": datetime.now().isoformat(),
            "metadata": {
                "complexity": task_analysis.get("complexity", "medium"),
                "requires_tools": task_analysis.get("requires_tools", []),
                "risk_level": task_analysis.get("risk_level", "low")
            }
        }
        
        self.planning_history.append(plan)
        logger.info(f"üìã Plan cr√©√© avec {len(steps)} √©tapes")
        
        return plan
    
    async def _analyze_task(
        self,
        task_description: str,
        context: Optional[Dict]
    ) -> Dict[str, Any]:
        """
        Analyse la t√¢che pour comprendre sa nature et ses exigences
        """
        analysis_prompt = f"""Analyse cette t√¢che en d√©tail:

T√¢che: {task_description}

Contexte: {json.dumps(context) if context else "Aucun"}

Fournis une analyse structur√©e (JSON):
{{
    "type": "type de t√¢che (recherche, analyse, cr√©ation, etc.)",
    "complexity": "simple|medium|complex",
    "requires_tools": ["liste des outils n√©cessaires"],
    "estimated_steps": "nombre estim√© d'√©tapes",
    "risk_level": "low|medium|high",
    "key_challenges": ["d√©fi 1", "d√©fi 2"],
    "success_criteria": ["crit√®re 1", "crit√®re 2"]
}}
"""
        
        response = await self.agent.think(analysis_prompt)
        
        try:
            return json.loads(response)
        except:
            # Fallback en cas d'√©chec de parsing
            return {
                "type": "general",
                "complexity": "medium",
                "requires_tools": [],
                "estimated_steps": 3,
                "risk_level": "low",
                "raw_analysis": response
            }
    
    async def _decompose_task(
        self,
        task_description: str,
        analysis: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """
        D√©compose la t√¢che en sous-t√¢ches g√©rables
        """
        decomposition_prompt = f"""D√©compose cette t√¢che en sous-t√¢ches simples et actionnables:

T√¢che principale: {task_description}

Analyse: {json.dumps(analysis, indent=2)}

Fournis une d√©composition structur√©e (JSON):
{{
    "subtasks": [
        {{
            "id": "step_1",
            "description": "Description de la sous-t√¢che",
            "action": "action sp√©cifique √† effectuer",
            "tool": "outil √† utiliser (ou null)",
            "inputs": {{}},
            "expected_output": "ce qui devrait √™tre produit"
        }}
    ]
}}

Principes:
- Chaque sous-t√¢che doit √™tre simple et claire
- Ordre logique d'ex√©cution
- Chaque sous-t√¢che doit avoir un r√©sultat mesurable
"""
        
        response = await self.agent.think(decomposition_prompt)
        
        try:
            data = json.loads(response)
            return data.get("subtasks", [])
        except:
            # Fallback: cr√©er une sous-t√¢che simple
            return [{
                "id": "step_1",
                "description": task_description,
                "action": "execute",
                "tool": None,
                "inputs": {},
                "expected_output": "R√©sultat de la t√¢che"
            }]
    
    async def _create_execution_steps(
        self,
        subtasks: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """
        Cr√©e les √©tapes d'ex√©cution d√©taill√©es √† partir des sous-t√¢ches
        """
        steps = []
        
        for i, subtask in enumerate(subtasks):
            step = {
                "id": subtask.get("id", f"step_{i+1}"),
                "order": i + 1,
                "description": subtask.get("description", ""),
                "action": subtask.get("action", "execute"),
                "tool": subtask.get("tool"),
                "inputs": subtask.get("inputs", {}),
                "expected_output": subtask.get("expected_output", ""),
                "status": "pending",
                "retries": 0,
                "max_retries": 3
            }
            steps.append(step)
        
        return steps
    
    def _identify_dependencies(self, steps: List[Dict[str, Any]]) -> Dict[str, List[str]]:
        """
        Identifie les d√©pendances entre les √©tapes
        
        Pour l'instant, assume une ex√©cution s√©quentielle simple
        Dans une version avanc√©e, on pourrait analyser les inputs/outputs
        """
        dependencies = {}
        
        for i, step in enumerate(steps):
            step_id = step["id"]
            # Chaque √©tape d√©pend de la pr√©c√©dente
            if i > 0:
                dependencies[step_id] = [steps[i-1]["id"]]
            else:
                dependencies[step_id] = []
        
        return dependencies
    
    def _estimate_duration(self, steps: List[Dict[str, Any]]) -> int:
        """
        Estime la dur√©e d'ex√©cution en secondes
        """
        # Estimation simple: 30 secondes par √©tape
        base_time = len(steps) * 30
        
        # Ajouter du temps pour les outils complexes
        for step in steps:
            tool = step.get("tool")
            if tool in ["web_search", "code_execution"]:
                base_time += 20
        
        return base_time
    
    async def replan(
        self,
        current_plan: Dict[str, Any],
        failed_step: Dict[str, Any],
        error: str
    ) -> Dict[str, Any]:
        """
        Replanifie apr√®s un √©chec
        """
        logger.warning(f"‚ö†Ô∏è  Replanification n√©cessaire apr√®s √©chec de {failed_step['id']}")
        
        replan_prompt = f"""Une √©tape a √©chou√©. Cr√©e un nouveau plan:

Plan original: {json.dumps(current_plan, indent=2)}

√âtape √©chou√©e: {json.dumps(failed_step, indent=2)}

Erreur: {error}

Propose une approche alternative ou une correction.
"""
        
        response = await self.agent.think(replan_prompt)
        
        # Pour l'instant, retourne le plan original avec l'√©tape modifi√©e
        # Dans une version avanc√©e, on recr√©erait le plan compl√®tement
        new_plan = current_plan.copy()
        new_plan["replanned"] = True
        new_plan["replan_reason"] = error
        
        return new_plan

